from simphony_metaparser.utils import traverse, without_cuba_prefix


class CUBAEnumGenerator(object):
    """Generator class for cuba.py enumeration.
    """

    def generate(self, ontology, output):
        """Generates the cuba file from the yaml-extracted dictionary
        of cuba and simphony_metadata files. Writes the generated code
        in the file object output
        """
        lines = [
            '# code auto-generated by the\n',
            '# simphony-metadata/scripts/generate.py script.\n',
            '# cuba.yml\n',
            'from enum import Enum, unique\n',
            '\n',
            '\n',
            '@unique\n',
            'class CUBA(Enum):\n'
            ]
        template = '    {cuba_name} = "{cuba_name}"'

        all_keys = set(d.name for d in ontology.data_types)
        all_keys.update([d.name for d, _ in traverse(ontology.root_cuds_item)])

        for keyword in sorted(list(all_keys)):
            line = template.format(cuba_name=without_cuba_prefix(keyword))

            # yapf does not break such lines, so we have to get creative.
            if len(line) >= 79:
                line += "  # noqa"

            lines.append(line+'\n')

        output.writelines(lines)
